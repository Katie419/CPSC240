     1                                  extern printf   ; includes printf
     2                                  extern scanf    ; includes scanf
     3                                  
     4                                  
     5                                  INPUT_LEN equ 64
     6                                  
     7                                  global sum
     8                                  
     9                                  segment .data
    10                                  
    11                                  
    12 00000000 257300                  string_format: db "%s", 0
    13 00000003 506C6561736520656E-     prompt_name: db "Please enter your name user: ", 0
    13 0000000C 74657220796F757220-
    13 00000015 6E616D652075736572-
    13 0000001E 3A2000             
    14 00000021 5468652070726F6772-     exit: db "The program will now return to the driver", 10, 0
    14 0000002A 616D2077696C6C206E-
    14 00000033 6F772072657475726E-
    14 0000003C 20746F207468652064-
    14 00000045 72697665720A00     
    15                                  
    16                                  ; printf("%s", my_string_pointer);
    17                                  
    18                                  segment .bss
    19                                  
    20 00000000 <res 00000040>          user_name: resb INPUT_LEN
    21                                  
    22                                  segment .text
    23                                  sum:
    24                                  
    25                                  
    26 00000000 55                      push rbp ; Push memory address of base of previous stack frame onto stack top
    27                                  
    28 00000001 4889E5                  mov rbp, rsp ; Copy value of stack pointer into base pointer, rbp = rsp = both point to stack top
    29                                      ; Rbp now holds the address of the new stack frame, i.e "top" of stack
    30                                  
    31 00000004 57                      push rdi ; Backup rdi
    32 00000005 56                      push rsi ; Backup rsi
    33 00000006 52                      push rdx ; Backup rdx
    34 00000007 51                      push rcx ; Backup rcx
    35 00000008 4150                    push r8 ; Backup r8
    36 0000000A 4151                    push r9 ; Backup r9
    37 0000000C 4152                    push r10 ; Backup r10
    38 0000000E 4153                    push r11 ; Backup r11
    39 00000010 4154                    push r12 ; Backup r12
    40 00000012 4155                    push r13 ; Backup r13
    41 00000014 4156                    push r14 ; Backup r14
    42 00000016 4157                    push r15 ; Backup r15
    43 00000018 53                      push rbx ; Backup rbx
    44 00000019 9C                      pushf ; Backup rflags
    45                                  ;===============
    46                                  
    47                                  ;registers to keep track of
    48 0000001A 4989FF                  mov r15, rdi ;r15 = array pointer
    49 0000001D 4989F6                  mov r14, rsi ;r14 = counter
    50                                  
    51                                  ;-----
    52                                  ;set the sum value to 0 in xmm15
    53 00000020 B800000000              mov rax, 0
    54 00000025 F24C0F2AF8              cvtsi2sd xmm15, rax
    55                                  
    56                                  ;==========
    57                                  beginloop:
    58 0000002A F2470F583CF7            addsd xmm15, [r15 + 8*r14]
    59                                  
    60 00000030 49FFCE                  dec r14
    61                                  
    62 00000033 4983FE00                cmp r14, 0
    63 00000037 7DF1                    jge beginloop
    64                                  
    65 00000039 F2410F10C7              movsd xmm0, xmm15
    66                                  
    67                                  ;===============
    68 0000003E 9D                      popf ; Restore rflags
    69 0000003F 5B                      pop rbx ; Restore rbx
    70 00000040 415F                    pop r15 ; Restore r15
    71 00000042 415E                    pop r14 ; Restore r14
    72 00000044 415D                    pop r13 ; Restore r13
    73 00000046 415C                    pop r12 ; Restore r12
    74 00000048 415B                    pop r11 ; Restore r11
    75 0000004A 415A                    pop r10 ; Restore r10
    76 0000004C 4159                    pop r9 ; Restore r9
    77 0000004E 4158                    pop r8 ; Restore r8
    78 00000050 59                      pop rcx ; Restore rcx
    79 00000051 5A                      pop rdx ; Restore rdx
    80 00000052 5E                      pop rsi ; Restore rsi
    81 00000053 5F                      pop rdi ; Restore rdi
    82                                  
    83 00000054 5D                      pop rbp ; Restore rbp
    84                                  
    85 00000055 C3                      ret ;  return
