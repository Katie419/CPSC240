     1                                  extern printf
     2                                  extern scanf
     3                                  extern strlen
     4                                  extern isfloat
     5                                  extern atof
     6                                  
     7                                  INPUT_LEN equ 64
     8                                  
     9                                  global get_assessed_values
    10                                  
    11                                  segment .data
    12                                  
    13 00000000 256C6600                float_format db "%lf", 0
    14 00000004 257300                  string_format db "%s", 0
    15                                  
    16 00000007 4E6578742077652077-     fill_prompt db "Next we will collect the property values in your assessment district.  Between each value enter while space. When finished entering values press <enter> followed by control+D.", 10, 0
    16 00000010 696C6C20636F6C6C65-
    16 00000019 637420746865207072-
    16 00000022 6F7065727479207661-
    16 0000002B 6C75657320696E2079-
    16 00000034 6F7572206173736573-
    16 0000003D 736D656E7420646973-
    16 00000046 74726963742E202042-
    16 0000004F 65747765656E206561-
    16 00000058 63682076616C756520-
    16 00000061 656E74657220776869-
    16 0000006A 6C652073706163652E-
    16 00000073 205768656E2066696E-
    16 0000007C 697368656420656E74-
    16 00000085 6572696E672076616C-
    16 0000008E 756573207072657373-
    16 00000097 203C656E7465723E20-
    16 000000A0 666F6C6C6F77656420-
    16 000000A9 627920636F6E74726F-
    16 000000B2 6C2B442E0A00       
    17 000000B8 496E76616C69642069-     invalid_input db "Invalid input", 10, 0
    17 000000C1 6E7075740A00       
    18 000000C7 5468616E6B20796F75-     error db "Thank you.  The data input set was corrupted.  Please run this program again.", 10, 0
    18 000000D0 2E2020546865206461-
    18 000000D9 746120696E70757420-
    18 000000E2 736574207761732063-
    18 000000EB 6F727275707465642E-
    18 000000F4 2020506C6561736520-
    18 000000FD 72756E207468697320-
    18 00000106 70726F6772616D2061-
    18 0000010F 6761696E2E0A00     
    19                                  
    20                                  
    21                                  segment .bss
    22                                  
    23 00000000 <res 00000040>          user_input resb INPUT_LEN
    24                                  
    25                                  segment .text
    26                                  
    27                                  get_assessed_values:
    28                                  
    29                                  ;////////////BEGIN CODE///////////////
    30                                  
    31                                  ;===============
    32                                  ;16 pushes
    33                                  
    34 00000000 55                      push rbp ; Push memory address of base of previous stack frame onto stack top
    35                                  
    36 00000001 4889E5                  mov rbp, rsp ; Copy value of stack pointer into base pointer, rbp = rsp = both point to stack top
    37                                      ; Rbp now holds the address of the new stack frame, i.e "top" of stack
    38                                  
    39 00000004 57                      push rdi ; Backup rdi
    40 00000005 56                      push rsi ; Backup rsi
    41 00000006 52                      push rdx ; Backup rdx
    42 00000007 51                      push rcx ; Backup rcx
    43 00000008 4150                    push r8 ; Backup r8
    44 0000000A 4151                    push r9 ; Backup r9
    45 0000000C 4152                    push r10 ; Backup r10
    46 0000000E 4153                    push r11 ; Backup r11
    47 00000010 4154                    push r12 ; Backup r12
    48 00000012 4155                    push r13 ; Backup r13
    49 00000014 4156                    push r14 ; Backup r14
    50 00000016 4157                    push r15 ; Backup r15
    51 00000018 53                      push rbx ; Backup rbx
    52 00000019 9C                      pushf ; Backup rflags
    53                                  
    54                                  ;===============
    55                                  ;Set aside registers to hold information
    56                                  
    57 0000001A 4989FF                  mov r15, rdi ;r15 = pointer to array
    58 0000001D 41BE00000000            mov r14, 0   ;r14 = loop counter
    59 00000023 4989F5                  mov r13, rsi ;r13 = max size for array
    60                                  
    61                                  
    62                                  ;===============
    63                                  ;Print fill prompt
    64                                  
    65 00000026 B800000000              mov rax, 0
    66 0000002B 48BF-                   mov rdi, string_format
    66 0000002D [0400000000000000] 
    67 00000035 48BE-                   mov rsi, fill_prompt
    67 00000037 [0700000000000000] 
    68 0000003F E8(00000000)            call printf
    69                                  
    70                                  ;===============
    71                                  ;Start a Loop to fill the array
    72                                  
    73                                  ;r15 = pointer to array
    74                                  ;r14 = loop counter
    75                                  ;r13 = max size for array
    76                                  
    77                                  beginloop:
    78                                    ;-----
    79                                    ;Check if the array is completely filled
    80 00000044 4D39F5                    cmp r13, r14
    81 00000047 0F84D6000000              je leave_loop
    82                                  
    83                                    ;==========
    84                                    ;----
    85                                    ;Get the user input
    86                                  
    87                                    ;mov rdi, user_input
    88                                    ;mov rsi, INPUT_LEN
    89                                    ;mov rdx, [stdin]
    90                                    ;call fgets
    91                                  
    92 0000004D B801000000                mov rax, 1
    93 00000052 48BF-                     mov rdi, string_format
    93 00000054 [0400000000000000] 
    94 0000005C 48BE-                     mov rsi, user_input
    94 0000005E [0000000000000000] 
    95 00000066 E8(00000000)              call scanf
    96                                  
    97                                    ;-----
    98                                    ;Check if user entered cntrl + d
    99                                  
   100 0000006B 4898                      cdqe
   101 0000006D 4883F8FF                  cmp rax, -1
   102 00000071 0F84AC000000              je leave_loop
   103                                  
   104                                    ;-----
   105                                    ;replace trailing \n with \0 in job_name
   106                                  
   107 00000077 B800000000                mov rax, 0
   108 0000007C 48BF-                     mov rdi, user_input
   108 0000007E [0000000000000000] 
   109 00000086 E8(00000000)              call strlen
   110 0000008B 4883E801                  sub rax, 1
   111 0000008F 4989C4                    mov r12, rax
   112 00000092 41C68424[00000000]-       mov byte [user_input + r12], 0
   112 0000009A 00                 
   113                                  
   114                                    ;-----
   115                                  
   116                                    ;===========
   117                                    ;Validate
   118                                  
   119                                    ;-----
   120                                    ;Call the isfloat function
   121                                  
   122 0000009B B800000000                mov	rax, 0
   123 000000A0 48BF-                     mov	rdi, user_input
   123 000000A2 [0000000000000000] 
   124 000000AA E8(00000000)              call isfloat
   125 000000AF 4989C3                    mov	r11, rax
   126                                  
   127                                    ;-----
   128                                    ;compare r11 which is the return of the function with 0(false)
   129                                  
   130 000000B2 4983FB00                  cmp r11, 0
   131 000000B6 7427                      je  invalid
   132                                  
   133                                    ;-----
   134                                    ;==========
   135                                    ;-----
   136                                    ;convert user input to float
   137                                  
   138 000000B8 B801000000                mov rax, 1
   139 000000BD 48BF-                     mov rdi, user_input
   139 000000BF [0000000000000000] 
   140 000000C7 E8(00000000)              call atof
   141 000000CC F2440F10F8                movsd xmm15, xmm0
   142                                  
   143                                    ;-----
   144                                    ;place the input number in array
   145                                  
   146 000000D1 F2470F113CF7              movsd [r15 + 8*r14], xmm15
   147 000000D7 49FFC6                    inc r14
   148 000000DA E965FFFFFF                jmp beginloop
   149                                  
   150                                    ;-----
   151                                  ;===============
   152                                  ;Out of Loop
   153                                  
   154                                  invalid:
   155                                  
   156 000000DF B800000000              mov rax, 0
   157 000000E4 48BF-                   mov rdi, string_format
   157 000000E6 [0400000000000000] 
   158 000000EE 48BE-                   mov rsi, invalid_input
   158 000000F0 [B800000000000000] 
   159 000000F8 E8(00000000)            call printf
   160                                  
   161 000000FD B800000000              mov rax, 0
   162 00000102 48BF-                   mov rdi, string_format
   162 00000104 [0400000000000000] 
   163 0000010C 48BE-                   mov rsi, error
   163 0000010E [C700000000000000] 
   164 00000116 E8(00000000)            call printf
   165                                  
   166 0000011B 41BE00000000            mov r14, 0
   167                                  
   168 00000121 EB00                    jmp leave_loop
   169                                  
   170                                  
   171                                  leave_loop:
   172                                  
   173                                  ;===============
   174                                  ;return array size to caller
   175                                  
   176 00000123 4C89F0                  mov rax, r14
   177                                  
   178                                  ;===============
   179                                  ;16 pops
   180 00000126 9D                      popf ; Restore rflags
   181 00000127 5B                      pop rbx ; Restore rbx
   182 00000128 415F                    pop r15 ; Restore r15
   183 0000012A 415E                    pop r14 ; Restore r14
   184 0000012C 415D                    pop r13 ; Restore r13
   185 0000012E 415C                    pop r12 ; Restore r12
   186 00000130 415B                    pop r11 ; Restore r11
   187 00000132 415A                    pop r10 ; Restore r10
   188 00000134 4159                    pop r9 ; Restore r9
   189 00000136 4158                    pop r8 ; Restore r8
   190 00000138 59                      pop rcx ; Restore rcx
   191 00000139 5A                      pop rdx ; Restore rdx
   192 0000013A 5E                      pop rsi ; Restore rsi
   193 0000013B 5F                      pop rdi ; Restore rdi
   194                                  
   195 0000013C 5D                      pop rbp ; Restore rbp
   196                                  
   197 0000013D C3                      ret ;  return
