     1                                  extern printf
     2                                  extern scanf
     3                                  
     4                                  INPUT_LEN equ 64
     5                                  
     6                                  global asm_program
     7                                  
     8                                  segment .data
     9                                  
    10                                  
    11 00000000 257300                  string_format db "%s", 0
    12 00000003 506C6561736520656E-     prompt_name db "Please enter your name user: ", 0
    12 0000000C 74657220796F757220-
    12 00000015 6E616D652075736572-
    12 0000001E 3A2000             
    13 00000021 486176652061206E69-     bye db "Have a nice day, %s!", 10,0
    13 0000002A 6365206461792C2025-
    13 00000033 73210A00           
    14 00000037 5468652070726F6772-     exit db "The program will now return to the driver", 10, 0
    14 00000040 616D2077696C6C206E-
    14 00000049 6F772072657475726E-
    14 00000052 20746F207468652064-
    14 0000005B 72697665720A00     
    15                                  
    16                                  
    17                                  segment .bss
    18                                  
    19 00000000 <res 00000040>          user_name: resb INPUT_LEN
    20                                  
    21                                  segment .text
    22                                  asm_program:
    23                                  
    24                                  ;//////BEGIN CODE/////////
    25                                  
    26                                  ;===============
    27                                  ;16 pushes
    28                                  
    29 00000000 55                      push rbp ; Push memory address of base of previous stack frame onto stack top
    30                                  
    31 00000001 4889E5                  mov rbp, rsp ; Copy value of stack pointer into base pointer, rbp = rsp = both point to stack top
    32                                      ; Rbp now holds the address of the new stack frame, i.e "top" of stack
    33                                  
    34 00000004 57                      push rdi ; Backup rdi
    35 00000005 56                      push rsi ; Backup rsi
    36 00000006 52                      push rdx ; Backup rdx
    37 00000007 51                      push rcx ; Backup rcx
    38 00000008 4150                    push r8 ; Backup r8
    39 0000000A 4151                    push r9 ; Backup r9
    40 0000000C 4152                    push r10 ; Backup r10
    41 0000000E 4153                    push r11 ; Backup r11
    42 00000010 4154                    push r12 ; Backup r12
    43 00000012 4155                    push r13 ; Backup r13
    44 00000014 4156                    push r14 ; Backup r14
    45 00000016 4157                    push r15 ; Backup r15
    46 00000018 53                      push rbx ; Backup rbx
    47 00000019 9C                      pushf ; Backup rflags
    48                                  
    49                                  ;===============
    50                                  
    51                                  ; simple printf block
    52 0000001A B800000000                mov rax, 0
    53 0000001F 48BF-                     mov rdi, string_format
    53 00000021 [0000000000000000] 
    54 00000029 48BE-                     mov rsi, prompt_name
    54 0000002B [0300000000000000] 
    55 00000033 E8(00000000)              call printf
    56                                  
    57                                  ; printf("%s", prompt_name);
    58                                  
    59                                  ; simple scanf block
    60 00000038 B800000000              mov rax, 0
    61 0000003D 48BF-                   mov rdi, string_format
    61 0000003F [0000000000000000] 
    62 00000047 48BE-                   mov rsi, user_name
    62 00000049 [0000000000000000] 
    63 00000051 E8(00000000)            call scanf
    64                                  
    65                                  ; scanf("%s", user_name);
    66                                  
    67                                  ; simple printf block
    68 00000056 B800000000              mov rax, 0
    69 0000005B 48BF-                   mov rdi, string_format
    69 0000005D [0000000000000000] 
    70 00000065 48BE-                   mov rsi, exit
    70 00000067 [3700000000000000] 
    71 0000006F E8(00000000)            call printf
    72                                  
    73 00000074 B801000000              mov rax, 1
    74 00000079 48BF-                   mov rdi, bye
    74 0000007B [2100000000000000] 
    75 00000083 48BE-                   mov rsi, user_name
    75 00000085 [0000000000000000] 
    76 0000008D E8(00000000)            call printf
    77                                  
    78                                  ;===============
    79                                  ;Final Jump
    80                                  
    81                                  ;===============
    82                                  ;what the program returns
    83                                  
    84 00000092 48B8-                   mov rax, user_name
    84 00000094 [0000000000000000] 
    85                                  
    86                                  ;===============
    87 0000009C 9D                      popf ; Restore rflags
    88 0000009D 5B                      pop rbx ; Restore rbx
    89 0000009E 415F                    pop r15 ; Restore r15
    90 000000A0 415E                    pop r14 ; Restore r14
    91 000000A2 415D                    pop r13 ; Restore r13
    92 000000A4 415C                    pop r12 ; Restore r12
    93 000000A6 415B                    pop r11 ; Restore r11
    94 000000A8 415A                    pop r10 ; Restore r10
    95 000000AA 4159                    pop r9 ; Restore r9
    96 000000AC 4158                    pop r8 ; Restore r8
    97 000000AE 59                      pop rcx ; Restore rcx
    98 000000AF 5A                      pop rdx ; Restore rdx
    99 000000B0 5E                      pop rsi ; Restore rsi
   100 000000B1 5F                      pop rdi ; Restore rdi
   101                                  
   102 000000B2 5D                      pop rbp ; Restore rbp
   103                                  
   104 000000B3 C3                      ret ;  return
